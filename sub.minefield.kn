+class Field()
	
	var pos: []int {フィールドの座標}
	var scroll: int {スクロールによるフィールド内部のタイルの移動を記録する}
	var cPos: []int {カーソルの座標}
	var cPosMin: int {カーソルの最大値とかは再利用するので参照しやすくしておきたい}
	var cPosMax: int
	var bImage: draw@Tex
	var curImage: draw@Tex
	var shiftImage: draw@Tex
	var pressEnter: draw@Tex
	var uiImage: draw@Tex
	
	var flagSE: snd@Snd
	var powerSE: snd@Snd
	var shiftSE: snd@Snd
	var pipiSE: snd@Snd
	var explosionSE: snd@Snd
	var openSE: snd@Snd
	var invalidSE: snd@Snd
	
	var map: [][]int {見た目がどれか}
	var mine: [][]int {地雷の有無}
	var hidari: []int {どこに置くかも自由なのでどこか}
	var haba: []int {幅変更を参照しやすくする}
	;+var level: int {仮置、スクロールスピード}
	;var dense: float {地雷密度}
	var layerData: [][]int {地雷の数,広さ,スピード,深さ(0-99みたいに)}
	var currentLayer: int
	var decoNo: int
	var decoRest: int
	var decoTimer: int
	var decoTimerNum: int
	var zoom: float {見にくいねんズームさせろ}
	var timerFont: draw@Font
	var tempFont: draw@Font
	var restTime: int
	var life: int
	var defused: int
	+var loadCounter: int
	
	var status: dict<[]char, int>
	var logMes: []char
	var logOutputted: bool
	+var onDeadPost: func<(int, float)>
	
	;var lCounter: []int {行の地雷の数を保持する}
	
	*func ctor() {初期化}
		do me.pos :: [0, 0]
		do me.cPos :: [4, 0]
		do me.cPosMin :: 0
		do me.cPosMax :: 19
		do me.bImage :: draw@makeTex("res/sprites.png")
		do me.curImage :: draw@makeTex("res/cursor.png")
		do me.shiftImage :: draw@makeTex("res/shiftFrame2.png")
		do me.pressEnter :: draw@makeTex("res/press.png")
		do me.uiImage :: draw@makeTex("res/UI.png")
		do me.flagSE :: snd@makeSnd("res/flag.wav", false)
		do me.powerSE :: snd@makeSnd("res/power.wav", false)
		do me.shiftSE :: snd@makeSnd("res/shift.wav", false)
		do me.pipiSE :: snd@makeSnd("res/pipi.wav", false)
		do me.explosionSE :: snd@makeSnd("res/bomb.wav", false)
		do me.openSE :: snd@makeSnd("res/pi67.wav", false)
		do me.invalidSE :: snd@makeSnd("res/noise09.wav", false)
		
		
		do me.map :: #[10, 60]int
		do me.mine :: #[10, 60]int
		do me.hidari :: #[60]int
		do me.haba :: #[60]int
		
		do me.layerData :: #[3, 5]int
		do me.loadCounter :: 0
		do me.load(0)
		do me.load(1)
		do me.load(2)
		;do me.level :: 5
		;do me.dense :: 0.1
		
		do me.decoNo :: 0
		do me.decoRest :: 0
		do me.decoTimer :: 0
		do me.decoTimerNum :: 0
		do me.zoom :: 2.0
		do me.timerFont :: draw@makeFont(null, 24, false, false, true, 0.0)
		do me.tempFont :: draw@makeFont(null, 24, false, false, true, 0.0)
		;do me.restTime :: 60 * 60
		do me.restTime :: 0
		
		do me.life :: 3
		
		do me.status :: #dict<[]char, int>
		do me.logMes :: ""
		do me.logOutputted :: false
	end func
	
	+func posSet(x: int, y: int) {フィールドの座標設定}
		do me.pos :: [x, y]
	end func
	
	{あまてらす編集部}
	func load(layer: int)
		do me.currentLayer :: (layer + 1) % 3
		;loadCounterによってどんなのを作るか決める
		;縦幅を計算
		do me.layerData[layer][3] :: me.loadCounter * 100
		do me.layerData[layer][4] :: me.loadCounter * 100 + 99
		;横幅
		switch(me.loadCounter)
		case 0
			do me.narrowMap(layer * 20, layer * 20, 4, 5)
			do me.narrowMap(layer * 20 + 1, layer * 20 + 1, 3, 6)
			do me.narrowMap(layer * 20 + 2, layer * 20 + 2, 2, 7)
			do me.narrowMap(layer * 20 + 3, layer * 20 + 3, 1, 8)
			do me.narrowMap(layer * 20 + 4, layer * 20 + 19, 0, 9)
			do me.layerData[layer][1] :: 2 + 4 + 6 + 8 + 10 * 16
		case 1 to 99
			do me.narrowMap(layer * 20, layer * 20 + 19, 0, 9)
			do me.layerData[layer][1] :: 10 * 20
		end switch
		;地雷割合
		var dense: float :: 0.50
		var mineNum: int :: 0
		if(me.loadCounter = 0)
			do dense :: 0.04
			do mineNum :: (dense * 150.0) $ int
			do me.addMine(layer * 20 + 5, layer * 20 + 19, mineNum)
			do me.layerData[layer][0] :: mineNum
		else
			switch(me.loadCounter)
			case 1 to 8
				do dense :: 0.03 * me.loadCounter $ float {0.03-0.24}
			case 9
				do dense :: 0.40
			case 10
				do dense :: 0.10
			case 11 to 16
				do dense :: 0.20
			case 17 to 19
				do dense :: 0.15
			end switch
			do dense :+ 0.001
			do mineNum :: (dense * 200.0) $ int
			do me.addMine(layer * 20, layer * 20 + 19, mineNum)
			do me.layerData[layer][0] :: mineNum
		end if
		;speed
		var speed: int :: 256
		switch(me.loadCounter)
		case 0
			do speed :: 1
		case 1
			do speed :: 2
		case 2 to 3
			do speed :: 4
		case 4 to 5
			do speed :: 8
		case 6 to 7
			do speed :: 16
		case 8
			do speed :: 32
		case 9 to 10
			do speed :: 4
		case 11
			do speed :: 8
		case 12
			do speed :: 16
		case 13
			do speed :: 24
		case 14 to 16
			do speed :: 32
		case 17 to 19
			do speed :: 48
		end switch
		do me.layerData[layer][2] :: speed
		
		do me.loadCounter :+ 1
	end func
	
	func narrowMap(min: int, max: int, left: int, right: int)
		for y(min, max)
			var avoid: int :: lib@rnd(left, right)
			for x(0, 9)
				do me.postMap(x, y, -1)
				do me.postMine(x, y, -1)
			end for
			for x(left, right)
				do me.postMap(x, y, 0)
				do me.postMine(x, y, 0)
				if(x = avoid)
					do me.mine[x][y] :: -1
				end if
			end for
			do me.haba[y] :: right - left + 1
			do me.hidari[y] :: left
		end for
		
	end func
	
	func addMine(min: int, max: int, num: int) {地雷設置}
		var safe: int :: 0
		var safeList: [][]int :: #[400, 2]int
		
		for i(0, 9)
			for j(min, max)
				if(me.getMine(i, j) = 0)
					do safeList[safe] :: [i, j]
					do safe :+ 1
				end if
			end for
		end for
		
		if(safe = 0 | safe < num)
			throw 1 {すでに地雷で埋まっています！}
		end if
		var temp: [][]int :: #[safe, 2]int
		for i(0, safe - 1)
			do temp[i] :: safeList[i]
		end for
		do temp.shuffle()
		for i(0, num - 1)
			do me.postMine(temp[i][0], temp[i][1], 1)
		end for
		;do me.map[safeList[rnd][0]][safeList[rnd][1]] :: 5 {//////////}
	end func
	
	;////////////////////////////////////////////////timer関係/////////////////////////////////////////
	+func timerAdvance()
		if(me.life > 0)
			do me.restTime :+ 1
		end if
	end func
	
	func timerShow()
		var temp: []char :: ((me.restTime / 60) $ float + (me.restTime % 60) $ float / 60.0).toStr()
		do me.timerFont.draw((256.0 + me.pos[0] $ float) * me.zoom, (320.0 + me.pos[1] $ float) * me.zoom, "\{temp}", 0xFF00FF00)
		{if(me.decoTimer > 0 | me.decoTimer % 2 = 0)
			do me.decoTimer :- 1
			do me.timerFont.draw(150.0, 220.0, "\{me.decoTimerNum}", 0xFF00FF00)
		end if}
		if(me.decoTimer = 0)
			do me.decoTimerNum :: 0
		end if
	end func
	
	;//////////////////////////////////////////////// I/O系関数 ////////////////////////////////////////////////////////////////////////
	;どうでもいいやつ
	
	+func getLife(): int
		ret me.life
	end func
	+func getDefused(): int
		ret me.defused
	end func
	+func getCurrentLayer(): []int
		ret me.layerData[me.currentLayer]
	end func
	+func getNextLayer(): []int
		ret me.layerData[(me.currentLayer + 1) % 3]
	end func
	+func getTime(): float
		;var temp: []char :: ((me.restTime / 60) $ float + (me.restTime % 60) $ float / 60.0).toStr()
		ret(me.restTime) $ float / 60.0
	end func
	
	
	
	;範囲外アクセスをしようとすると-1が返される。ちゃんと-1では処理を行わないようにすること
	func getMine(x: int, y: int): int {地雷の有無を確認}
		if(x = x.clamp(0, 9) & y = y.clamp(0, 59))
			ret me.mine[x][y]
		elif(x = x.clamp(0, 9) & y > 59)
			ret me.mine[x][y % 60]
		end if
		ret - 1
	end func
	
	func getMap(x: int, y: int): int
		if(x = x.clamp(0, 9) & y = y.clamp(0, 59))
			ret me.map[x][y]
		elif(x = x.clamp(0, 9) & y > 59)
			ret me.map[x][y % 60]
		end if
		ret - 1
	end func
	
	func getNum(x: int, y: int): int
		var counter: int :: 0
		for i(-1, 1)
			for j(-1, 1)
				do counter :+ me.getMine(x + i, y + j) <> -1 ?(me.getMine(x + i, y + j), 0)
			end for
		end for
		if(counter = 0)
			ret - 6
		end if
		ret counter
	end func
	
	func lineCountMine(y: int): int {ヨコ数を計測}
		var counter: int :: 0
		for i(0, 9)
			if(me.getMine(i, y) = 1)
				do counter :+ 1
			end if
		end for
		ret counter
	end func
	
	func lineCountFlag(y: int): int {フラグおいた数を計測}
		var counter: int :: 0
		for i(0, 9)
			if(me.getMap(i, y) = 2)
				do counter :+ 1
			end if
		end for
		ret counter
	end func
	
	func lineCountUnopen(y: int): int {開かれていない数（フラグ立ってるのも含む）}
		var counter: int :: 0
		for i(0, 9)
			if(me.getMap(i, y) = 0 | me.getMap(i, y) = 2)
				do counter :+ 1
			end if
		end for
		ret counter
	end func
	
	func lineProtect(y: int)
		for i(0, 9)
			if(me.getMap(i, y) = 0)
				do me.postMap(i, y, 2)
			end if
		end for
	end func
	
	func isClear(y: int): bool
		for i(0, 9)
			if((me.getMap(i, y) = 0 & me.getMine(i, y) = 1) | (me.getMap(i, y) = 2 & me.getMine(i, y) = 0))
				ret false
			end if
		end for
		ret true
	end func
	
	func getHaba(y: int): int
		ret me.haba[y % 60]
	end func
	func getHidari(y: int): int
		ret me.hidari[y % 60]
	end func
	
	;y大きい方に範囲外なら割り切る。
	;そういうのをいちいち書くのが面倒なので
	;ファンクションを作ることにしたんだ
	func postMine(x: int, y: int, value: int)
		if(x = x.clamp(0, 9) & y = y.clamp(0, 59))
			do me.mine[x][y] :: value
		elif(x = x.clamp(0, 9) & y > 59)
			do me.mine[x][y % 60] :: value
		end if
	end func
	
	func postMap(x: int, y: int, value: int)
		if(x = x.clamp(0, 9) & y = y.clamp(0, 59))
			do me.map[x][y] :: value
		elif(x = x.clamp(0, 9) & y > 59)
			do me.map[x][y % 60] :: value
		end if
	end func
	
	;//////////////////////////////////////////////////描画関係のもの///////////////////////////////////////////////
	func bDraw(x: int, y: int, color: int) {ブロック描画}
		if(color <> -1)
			if(color = 1)
				do me.bImage.drawScale((me.pos[0] + x) $ float * me.zoom, (me.pos[1] + y - me.scroll) $ float * me.zoom, 16.0 * me.zoom, 16.0 * me.zoom, color $ float * 16.0, 0.0, 16.0, 16.0, 0x88FFFFFF)
			else
				do me.bImage.drawScale((me.pos[0] + x) $ float * me.zoom, (me.pos[1] + y - me.scroll) $ float * me.zoom, 16.0 * me.zoom, 16.0 * me.zoom, color $ float * 16.0, 0.0, 16.0, 16.0, 0xFFFFFFFF)
			end if
			
		end if
	end func
	
	func numDraw(x: int, y: int, num: int) {数字描画}
		do num :+ 7
		if(num = 7)
			do num :: 1
		end if
		do me.bDraw(x, y, num)
	end func
	
	func curDraw(x: int, y: int) {カーソル描画}
		do me.curImage.drawScale((me.pos[0] + x - 1) $ float * me.zoom, (me.pos[1] + y - 1 - me.scroll) $ float * me.zoom, 18.0 * me.zoom, 18.0 * me.zoom, 0.0, 0.0, 18.0, 18.0, 0xFFFF5050)
	end func
	
	func defusedShow()
		do me.timerFont.draw((256.0 + me.pos[0] $ float) * me.zoom, (340.0 + me.pos[1] $ float) * me.zoom, "\{me.defused}", 0xFF000000)
	end func
	
	func wakuDraw(x: int, y: int, num: int)
		var ux: int :: num % 3
		var uy: int :: num / 3
		do me.uiImage.drawScale((me.pos[0] + x) $ float * me.zoom, (me.pos[1] + y) $ float * me.zoom, 16.0 * me.zoom, 16.0 * me.zoom, (ux * 16) $ float, (uy * 16) $ float, 16.0, 16.0, 0xFFFFFFFF)
	end func
	
	func mes(x: int, y: int, moji: []char)
		do me.tempFont.draw((me.pos[0] + x) $ float * me.zoom, (me.pos[1] + y) $ float * me.zoom, moji, draw@white)
	end func
	
	{func scrollPos(localY: int): int {マップの描写、スクロール込みでちょっと面倒なので関数つかう}
		do localY :% (20 * 16)
		if(localY < 10 * 16)
			do localY :+ 20 * 16
		end if
		ret localY
	end func}
	
	+func allDraw() {全部描画}
		for i(0, 9) {マップ}
			for j(0, 19)
				do me.bDraw(i * 16, j * 16 + ((me.scroll + 640) / 960) * 960, me.getMap(i, j))
			end for
			for j(20, 39)
				do me.bDraw(i * 16, j * 16 + ((me.scroll + 320) / 960) * 960, me.getMap(i, j))
			end for
			for j(40, 59)
				do me.bDraw(i * 16, j * 16 + (me.scroll / 960) * 960, me.getMap(i, j))
			end for
		end for
		for i(0, 19) {ヨコの表示}
			do me.numDraw(12 * 16, i * 16 + ((me.scroll + 640) / 960) * 960, me.lineCountMine(i))
		end for
		for i(20, 39) {ヨコの表示}
			do me.numDraw(12 * 16, i * 16 + ((me.scroll + 320) / 960) * 960, me.lineCountMine(i))
		end for
		for i(40, 59) {ヨコの表示}
			do me.numDraw(12 * 16, i * 16 + (me.scroll / 960) * 960, me.lineCountMine(i))
		end for
		for i(0, 19)
			do me.numDraw(13 * 16, i * 16 + ((me.scroll + 640) / 960) * 960, me.lineCountFlag(i))
		end for
		for i(20, 39)
			do me.numDraw(13 * 16, i * 16 + ((me.scroll + 320) / 960) * 960, me.lineCountFlag(i))
		end for
		for i(40, 59)
			do me.numDraw(13 * 16, i * 16 + (me.scroll / 960) * 960, me.lineCountFlag(i))
		end for
		do me.curDraw(me.cPos[0] * 16, me.cPos[1] * 16) {カーソル}
		;隠す
		do draw@rect(me.pos[0] $ float * me.zoom, (me.pos[1] - 320) $ float * me.zoom, (160.0 + 64.0) * me.zoom, 320.0 * me.zoom, 0xFF163035) {上}
		for j(-5, -2)
			do me.wakuDraw(0, j * 16, 3)
			do me.wakuDraw(16 * 13, j * 16, 5)
		end for
		for i(1, 12)
			do me.wakuDraw(16 * i, -16, 7)
		end for
		do me.wakuDraw(0, -16, 6)
		do me.wakuDraw(16 * 13, -16, 8)
		do draw@rect(me.pos[0] $ float * me.zoom, (me.pos[1] + 320) $ float * me.zoom, (160.0 + 64.0) * me.zoom, 320.0 * me.zoom, 0xFF163035) {下}
		for j(21, 26)
			do me.wakuDraw(0, j * 16, 3)
			do me.wakuDraw(16 * 13, j * 16, 5)
		end for
		for i(1, 12)
			do me.wakuDraw(16 * i, 16 * 20, 1)
		end for
		do me.wakuDraw(0, 16 * 20, 0)
		do me.wakuDraw(16 * 13, 16 * 20, 2)
		;ui中身
		var temp: []int :: me.getCurrentLayer()
		do me.mes(16, -56, "Now\nbomb:\{temp[0]}/\{temp[1]} speed:\{temp[2]}")
		do temp :: me.getNextLayer()
		do me.mes(16, 16 * 21, "Next\nbomb:\{temp[0]}/\{temp[1]} speed:\{temp[2]}")
		;フェーズ分け線
		do draw@line(me.pos[0] $ float * me.zoom, me.pos[1] $ float * me.zoom, (me.pos[0] $ float + 160.0) * me.zoom, me.pos[1] $ float * me.zoom, 0xFFFF5050) {上限ライン}
		do draw@line(me.pos[0] $ float * me.zoom, (me.pos[1] $ float + 320.0) * me.zoom, (me.pos[0] $ float + 160.0) * me.zoom, (me.pos[1] $ float + 320.0) * me.zoom, 0xFFFF5050) {下限ライン}
		do draw@line(me.pos[0] $ float * me.zoom, (me.pos[1] $ float + 320.0 - (me.scroll % 320) $ float) * me.zoom, (me.pos[0] $ float + 160.0) * me.zoom, (me.pos[1] $ float + 320.0 - (me.scroll % 320) $ float) * me.zoom, 0xFFFFFF00) {境目ライン}
		do me.timerShow()
		do me.defusedShow()
	end func
	
	+func onShift() {Shift中の枠線を表示}
		var y: int :: me.cPos[1]
		do me.shiftImage.drawScale((me.pos[0] $ float - 2.0) * me.zoom, (me.pos[1] $ float - 2.0 + y $ float * 16.0 - me.scroll $ float) * me.zoom, 2.0 * me.zoom, 20.0 * me.zoom, 0.0, 0.0, 2.0, 20.0, 0xFFFFFFFF)
		for i(0, 9)
			do me.shiftImage.drawScale((me.pos[0] $ float + 16.0 * i $ float) * me.zoom, (me.pos[1] $ float - 2.0 + y $ float * 16.0 - me.scroll $ float) * me.zoom, 16.0 * me.zoom, 20.0 * me.zoom, 2.0, 0.0, 16.0, 20.0, 0xFFFFFFFF)
		end for
		do me.shiftImage.drawScale((me.pos[0] $ float + 16.0 * 10.0) * me.zoom, (me.pos[1] $ float - 2.0 + y $ float * 16.0 - me.scroll $ float) * me.zoom, 2.0 * me.zoom, 20.0 * me.zoom, 18.0, 0.0, 2.0, 20.0, 0xFFFFFFFF)
		do me.curDraw(me.cPos[0] * 16, me.cPos[1] * 16) {カーソルが見えにくくなるので}
	end func
	
	+func showUpper(): []bool {何かしらの全画面演出を表示、返り値として動作可能、操作可能を配列で返している}
		if(me.decoNo > 0 & me.decoRest <= 0)
			do me.decoNo :: 0
		end if
		switch(me.decoNo)
		case 0
			ret[true, true]
		case 1
			switch(me.decoRest)
			case 32 to 999
				;ピピっていう音待ち
				do me.decoRest :- 1
				ret[false, false]
			case 31
				do me.explosionSE.play()
				do me.decoRest :- 1
				ret[false, false]
			case 1
				do me.decoRest :- 1
				ret[true, true]
			default
				;do draw@rect(0.0, 0.0, 8000.0, 6000.0, 0x00FF0000 + 0x01000000 * (0xFF * me.decoRest / 30))
				do me.decoRest :- 1
				ret[true, false] {動く、操作できない}
			end switch
		default
			throw 0xF {作成していない演出が呼び出されました}
		end switch
		
		throw 0xFF {動作が可能かどうかretしていません}
	end func
	
	func explosion()
		do me.pipiSE.play()
		do me.decoNo :: 1
		do me.decoRest :: 60
		
		do me.decoTimer :: 90
		do me.decoTimerNum :+ -5
		
		do me.addStatus("explosion", 1)
	end func
	
	func invalid()
		do me.invalidSE.play()
		;do me.decoTimer :: 90
		;do me.decoTimerNum :+ -10
		;do me.restTime :+ -10 * 60
		do me.addStatus("invalid", 1)
	end func
	
	+func tissaku()
		do me.zoom :- 0.1
	end func
	
	var enterShowTimer: int
	+func pressEnterShow()
		do me.enterShowTimer :+ 1
		if(me.enterShowTimer % 120 < 60)
			do me.pressEnter.drawScale(me.pos[0] $ float * me.zoom, (me.pos[1] + 120) $ float * me.zoom, 160.0 * me.zoom, 80.0 * me.zoom, 0.0, 0.0, 320.0, 160.0, 0xFFFFFFFF)
		end if
	end func
	
	;/////////////////////////////////////////////操作、動作関係の外部公開関数////////////////////////////////////////
	
	+func scrolling() {表示部分の外部参照的な座標を移動させる}{ついでにスクロールに関する各種更新作業も行いたい}
		if(me.life = 0)
			do me.outputLogMes()
			ret
		end if
		do me.scroll :+ 1
		;カーソル強制移動
		if((me.cPos[1] * 16 - me.scroll) < 0)
			do me.curMove(0, 1)
		end if
		;カーソル範囲変更
		do me.cPosMin :: 0 + ((me.scroll - 1) / 16 + 1)
		do me.cPosMax :: 19 + me.scroll / 16
		;切が良くなった！
		if(me.scroll % 320 = 0)
			;ログファイル更新
			do me.updateLogMes()
			;次の次登場するやつをリセット
			switch((me.scroll / 320) % 3)
			case 0
				do me.load(2)
				do me.lineUpdateUnvisible(39)
			case 1
				do me.load(0)
				do me.lineUpdateUnvisible(59)
			case 2
				do me.load(1)
				do me.lineUpdateUnvisible(19)
			end switch
			;下に合わせて更新
			do me.lineUpdate(me.cPosMax + 1)
		end if
		;オ、上の方チェックすっか～～～
		if(me.scroll % 16 = 1)
			var y: int :: me.scroll / 16
			;クリアしてる列を保護する
			if(me.lineCountUnopen(y) = me.lineCountMine(y))
				do me.lineProtect(y)
			end if
			if(me.isClear(y) = false)
				do me.life :- 1
			elif(me.lineCountMine(y) > 0)
				do me.life :+ me.life = 3 ?(0, 1)
			end if
			;上のほうにいった爆弾をチェックする
			for i(0, 9)
				do me.open(i, y)
			end for
			;フラグ多すぎな
			if(me.lineCountMine(y) < me.lineCountFlag(y))
				do me.invalid()
			end if
			do me.defused :+ me.lineCountMine(y)
		end if
		
	end func
	
	+func curMove(x: int, y: int) {カーソル移動}{1ずつしか動くことを想定されていない}
		do me.cPos[0] :+ x
		do me.cPos[1] :+ y
		;Xの判定から
		if(x <> 0)
			if(me.cPos[0] = me.getHidari(me.cPos[1]) - 1)
				do me.cPos[0] :: me.getHidari(me.cPos[1]) + me.getHaba(me.cPos[1]) - 1
			end if
			if(me.cPos[0] = me.getHidari(me.cPos[1]) + me.getHaba(me.cPos[1]))
				do me.cPos[0] :: me.getHidari(me.cPos[1])
			end if
		end if
		;Yの判定へ
		if(y <> 0)
			do me.cPos[1] :: me.cPos[1].clamp(me.cPosMin, me.cPosMax)
			if(me.getMap(me.cPos[0], me.cPos[1]) = -1)
				do me.cPos[0] :: me.cPos[0].clamp(me.getHidari(me.cPos[1]), me.getHidari(me.cPos[1]) + me.getHaba(me.cPos[1]) - 1)
			end if
		end if
	end func
	
	+func shift(x: int) {1づつしか動かすな}
		var y: int :: me.cPos[1]
		var newLineMap: []int :: #[10]int
		for i(0, 9)
			do newLineMap[i] :: me.getMap((i - x + 10) % 10, y)
		end for
		if(newLineMap[me.getHidari(y)] = -1)
			do newLineMap[me.getHidari(y)] :$ newLineMap[(me.getHidari(y) + me.getHaba(y)) % 10]
		end if
		if(newLineMap[me.getHidari(y) + me.getHaba(y) - 1] = -1)
			do newLineMap[me.getHidari(y) + me.getHaba(y) - 1] :$ newLineMap[(me.getHidari(y) - 1 + 10) % 10]
		end if
		for i(0, 9)
			do me.postMap(i, y, newLineMap[i])
		end for
		;地雷もね
		var newLineMine: []int :: #[10]int
		for i(0, 9)
			do newLineMine[i] :: me.getMine((i - x + 10) % 10, y)
		end for
		if(newLineMine[me.getHidari(y)] = -1)
			do newLineMine[me.getHidari(y)] :$ newLineMine[(me.getHidari(y) + me.getHaba(y)) % 10]
		end if
		if(newLineMine[me.getHidari(y) + me.getHaba(y) - 1] = -1)
			do newLineMine[me.getHidari(y) + me.getHaba(y) - 1] :$ newLineMine[(me.getHidari(y) - 1 + 10) % 10]
		end if
		for i(0, 9)
			do me.postMine(i, y, newLineMine[i])
		end for
		;更新
		do me.lineUpdate(y)
		do me.lineUpdate(y + 1)
		do me.lineUpdate(y - 1)
		do me.shiftSE.play()
		do me.addStatus("shift", 1)
	end func
	
	func lineUpdate(y: int) {shiftなどにより状況が変わったときに更新する}
		for x(0, 9)
			switch(me.getMap(x, y))
			case 1, 8 to 15
				do me.postMap(x, y, me.getNum(x, y) + 7)
			end switch
		end for
	end func
	
	func lineUpdateUnvisible(y: int) {shiftなどにより状況が変わったときに更新する}
		for x(0, 9)
			switch(me.getMap(x, y))
			case 1, 8 to 15
				do me.postMap(x, y, me.getNum(x, y) + 7)
			end switch
			if(me.getMap(x, y) = 1) {0が開封されていないことがあるのでパワーオープンする}
				var flagCounter: int :: 0
				for i(-1, 1)
					for j(-1, 1)
						if(me.getMap(x + i, y + j) = 2)
							do flagCounter :+ 1
						end if
					end for
				end for
				if(0 = flagCounter)
					var counter: int :: 0
					for i(-1, 1)
						for j(-1, 1)
							do counter :+ me.open(x + i, y + j)
						end for
					end for
					{if(counter >= 1)
						do me.powerSE.play()
					end if}
				end if
			end if
		end for
	end func
	
	+func decisionA() {%aが押下されたとき}
		var x: int :: me.cPos[0]
		var y: int :: me.cPos[1]
		switch(me.getMap(x, y))
		case 0, 5
			switch(me.open(x, y))
			case 1
				do me.openSE.play()
			case 3
				do me.life :- 1
			end switch
		case 1, 8 to 15
			do me.powerOpen()
		end switch
	end func
	
	+func decisionB() {%bが押下されたとき}
		var x: int :: me.cPos[0]
		var y: int :: me.cPos[1]
		switch(me.getMap(x, y))
		case 0, 2
			do me.flag()
		case 1, 8 to 15
			do me.powerOpen2()
		end switch
	end func
	
	func open(x: int, y: int): int {オープン！！！！！開けなかったら0を返す}
		var status: int :: me.getMap(x, y)
		do me.addStatus("normalOpen", 1)
		
		if((status = 0 | status = 5) & me.life >= 0) {開かれてないやつしか開けないよ}
			switch(me.getMine(x, y))
			case 0, -1
				do status :: 7 + me.getNum(x, y)
				do me.postMap(x, y, status)
				if(status = 1)
					for i(-1, 1)
						for j(-1, 1)
							do me.open(x + i, y + j)
						end for
					end for
				end if
				ret 1
				
				
			case 1 {大爆発}
				do status :: 6
				do me.postMap(x, y, status)
				do me.postMine(x, y, -1)
				do me.lineUpdate(y)
				do me.lineUpdate(y + 1)
				do me.lineUpdate(y - 1)
				do me.explosion()
				ret 3
				
			end switch
			ret 2
		end if
		ret 0
	end func
	
	+func flag()
		var x: int :: me.cPos[0]
		var y: int :: me.cPos[1]
		if(me.getMap(x, y) = 0)
			do me.postMap(x, y, 2)
			do me.flagSE.play()
		elif(me.getMap(x, y) = 2)
			do me.postMap(x, y, 0)
		end if
	end func
	
	func powerOpen()
		do me.addStatus("powerOpen1", 1)
		var x: int :: me.cPos[0]
		var y: int :: me.cPos[1]
		if(me.getMap(x, y) >= 8)
			var flagCounter: int :: 0
			for i(-1, 1)
				for j(-1, 1)
					if(me.getMap(x + i, y + j) = 2)
						do flagCounter :+ 1
					end if
				end for
			end for
			if(me.getMap(x, y) - 7 = flagCounter)
				var counter: int :: 0
				for i(-1, 1)
					for j(-1, 1)
						do counter :+ me.open(x + i, y + j)
					end for
				end for
				if(counter >= 1)
					do me.powerSE.play()
				end if
			end if
		end if
		if(me.getMap(x, y) = 1)
			var flagCounter: int :: 0
			for i(-1, 1)
				for j(-1, 1)
					if(me.getMap(x + i, y + j) = 2)
						do flagCounter :+ 1
					end if
				end for
			end for
			if(0 = flagCounter)
				var counter: int :: 0
				for i(-1, 1)
					for j(-1, 1)
						do counter :+ me.open(x + i, y + j)
					end for
				end for
				if(counter >= 1)
					do me.powerSE.play()
				end if
			end if
		end if
	end func
	
	func powerOpen2()
		do me.addStatus("powerOpen2", 1)
		var y: int :: me.cPos[1]
		if(me.lineCountMine(y) = me.lineCountFlag(y))
			var counter: int :: 0
			for i(0, 9)
				do counter :+ me.open(i, y)
			end for
			if(counter >= 1)
				do me.powerSE.play()
			end if
		end if
	end func
	
	;////////////////DEBUG用
	+func debug(): []char
		ret me.scroll.toStr()
	end func
	
	+func debug_life(x: int)
		do me.life :+ x
	end func
	
	+func debug_clear()
		var layer: int :: me.currentLayer
		do me.narrowMap(layer * 20, layer * 20 + 19, 0, 9)
	end func
	
	+func debug_death()
		do me.defused :: 100
		do me.life :: 0
	end func
	
	func addStatus(key: []char, num: int)
		var exist: bool
		var saisyo: int :: me.status.get(key, &exist)
		do me.status.add(key, saisyo + num)
	end func
	
	func updateLogMes()
		var str: lib@Str :: #lib@Str {文字列をラップしたクラス}
		do str.value :: "" {空文字列を設定しておく}
		do me.status.forEach(callback, str)
		func callback(key: []char, value: int, data: lib@Str): bool
			do data.value :~ "\{key}:\{value}." {各要素に対して文字列を追加する}
			ret true {継続する場合はtrue、中止する場合はfalseを返す}
		end func
		
		var layerData: []int :: me.getCurrentLayer()
		do me.logMes :: me.logMes ~ "通過:\{layerData[3]} Time:\{me.restTime / 60} Defused:\{me.defused}" ~ "\n" ~ str.value ~ "\n"
	end func
	
	+func outputLogMes()
		if(me.logOutputted = false)
			var handle: file@Writer :: file@makeWriter("history_v0.7(\{lib@now()}).txt", false)
			do handle.writeStr(me.logMes)
			do handle.fin()
			do me.logOutputted :: true
		end if
	end func
	
end class
