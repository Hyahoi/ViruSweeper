+class Ranking()
	var name: [][]char
	var score: []int
	var time: []float
	var mode: int {0受付,1ネームエントリー,2リセット待ち}
	var editing: int
	var moji: draw@Font
	var title: draw@Tex
	var vocabulary: []char
	
	;入力関係
	var cursor: int
	var mojiIndex: int
	var tempRank: int
	var tempName: []char
	
	*func ctor()
		do me.name :: #[10, 3]char
		do me.score :: #[10]int
		do me.time :: #[10]float
		do me.moji :: draw@makeFont(null, 24, true, false, true, 0.0)
		do me.title :: draw@makeTex("res/ranking.png")
		do me.vocabulary :: "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890終" {37}
	end func
	
	+func defaultScore()
		do me.name :: ["AMT", "HYA", "NYA", "CAT", "SEN", "NON", "LIN", "EAR", "DOG", "ODG"]
		do me.score :: [600, 160, 100, 80, 60, 40, 20, 10, 5, 1]
		do me.time :: [1200.0, 600.0, 460.0, 380.0, 300.0, 180.0, 100.0, 40.0, 20.0, 500.0]
	end func
	
	+func post(num: int, speed: float)
		do me.cursor :: 0
		do me.mojiIndex :: 0
		
		var rank: int :: 10
		for i(0, 9)
			if(num > me.score[i] | (num = me.score[i] & speed < me.time[i])) {記録が勝っているのでそこの順位になる}
				do rank :: i
				break i
			end if
		end for
		
		if(rank <= 8) {9位以上でないと移動が発生しない}
			for i(8, rank, -1)
				do me.name[i + 1] :: me.name[i]
				do me.score[i + 1] :: me.score[i]
				do me.time[i + 1] :: me.time[i]
			end for
		end if
		if(rank <= 9) {書き換え}
			do me.score[rank] :: num
			do me.time[rank] :: speed
			do me.name[rank] :: ""
			do me.mode :: 1
		end if
		
		if(rank = 10) {書き換えなし}
			do me.mode :: 2
		end if
		
		do me.tempRank :: rank
	end func
	
	+func show()
		do me.title.draw(640.0, 0.0, 0.0, 0.0, 494.0, 126.0, 0xFFFFFFFF)
		do me.moji.draw(608.0, 128.0, "順位", 0xFF00FFFF)
		do me.moji.draw(672.0, 128.0, "名前", 0xFF00FFFF)
		do me.moji.draw(768.0, 128.0, "得点", 0xFF00FFFF)
		do me.moji.draw(864.0, 128.0, "時間", 0xFF00FFFF)
		for i(0, 9)
			do me.moji.draw(608.0, (i * 48) $ float + 160.0, "\{i + 1}", 0xFF00FFFF)
			do me.moji.draw(672.0, (i * 48) $ float + 160.0, "\{me.name[i]}", 0xFF00FFFF)
			do me.moji.draw(768.0, (i * 48) $ float + 160.0, "\{me.score[i]}", 0xFF00FFFF)
			do me.moji.draw(864.0, (i * 48) $ float + 160.0, "\{me.time[i]}", 0xFF00FFFF)
		end for
		
		if(me.mode = 1)
			if(input@pad(0, %a) = 1)
				if(me.mojiIndex % 37 = 36)
					do me.mode :: 2
				else
					switch(me.cursor)
					case 0 to 1
						do me.name[me.tempRank] :~ [me.vocabulary[me.mojiIndex % 37]]
						do me.cursor :+ 1
					case 2
						do me.name[me.tempRank] :~ [me.vocabulary[me.mojiIndex % 37]]
						do me.cursor :+ 1
						do me.mojiIndex :: 36
					end switch
				end if
			end if
			
			if(input@pad(0, %b) = 1)
				switch(me.cursor)
				case 1
					do me.name[me.tempRank] :: ""
					do me.cursor :- 1
				case 2
					do me.name[me.tempRank] :: [me.name[me.tempRank][0]]
					do me.cursor :- 1
				case 3
					do me.name[me.tempRank] :: [me.name[me.tempRank][0], me.name[me.tempRank][1]]
					do me.cursor :- 1
				end switch
			end if
			
			if(@DAS(input@pad(0, %up), 20, 10) & me.cursor < 3)
				do me.mojiIndex :+ 1
			end if
			if(@DAS(input@pad(0, %down), 20, 10) & me.cursor < 3)
				do me.mojiIndex :+ 36
			end if
			do me.moji.draw(672.0 + (24 * me.cursor) $ float, (me.tempRank * 48) $ float + 160.0, "_", 0xFF00FFFF)
			do me.moji.draw(672.0 + (24 * me.cursor) $ float, (me.tempRank * 48) $ float + 160.0, [me.vocabulary[me.mojiIndex % 37]], 0xFF00FFFF)
		end if
	end func
	
	+func isFixed(): bool
		if(me.mode = 0)
			ret true
		end if
		ret false
	end func
	
	+func isComplete(): bool
		if(me.mode = 2)
			ret true
		end if
		ret false
	end func
	
	+func set()
		do me.mode :: 0
	end func
	
end class

func DAS(value: int, onBorder: int, onInterval: int): bool
	if(value = 1)
		ret true
	elif(value >= onBorder)
		ret((value - onBorder) % onInterval = 0)
	end if
	ret false
end func
